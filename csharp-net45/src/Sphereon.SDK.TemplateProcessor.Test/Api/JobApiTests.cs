/* 
 * Template-Processor
 *
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.TemplateProcessor.Client;
using Sphereon.SDK.TemplateProcessor.Api;
using Sphereon.SDK.TemplateProcessor.Model;

namespace Sphereon.SDK.TemplateProcessor.Test
{
    /// <summary>
    ///  Class for testing JobApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class JobApiTests
    {
        private JobApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new JobApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of JobApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' JobApi
            //Assert.IsInstanceOfType(typeof(JobApi), instance, "instance is a JobApi");
        }

        
        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test]
        public void GetJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //var response = instance.GetJob(jobId);
            //Assert.IsInstanceOf<MergeJobResponse> (response, "response is MergeJobResponse");
        }
        
        /// <summary>
        /// Test GetJobs
        /// </summary>
        [Test]
        public void GetJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> status = null;
            //var response = instance.GetJobs(status);
            //Assert.IsInstanceOf<List<MergeJobResponse>> (response, "response is List<MergeJobResponse>");
        }
        
        /// <summary>
        /// Test GetResultStream
        /// </summary>
        [Test]
        public void GetResultStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //ResultStreamRequest resultStreamRequest = null;
            //var response = instance.GetResultStream(jobId, resultStreamRequest);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetResultStreamsAsContainer
        /// </summary>
        [Test]
        public void GetResultStreamsAsContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //OutputSettings outputSettings = null;
            //var response = instance.GetResultStreamsAsContainer(jobId, outputSettings);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test SubmitJob
        /// </summary>
        [Test]
        public void SubmitJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MergeSettings mergesettings = null;
            //var response = instance.SubmitJob(mergesettings);
            //Assert.IsInstanceOf<MergeJobResponse> (response, "response is MergeJobResponse");
        }
        
    }

}
