/* 
 * Template-Processor
 *
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.TemplateProcessor.Client;
using Sphereon.SDK.TemplateProcessor.Model;

namespace Sphereon.SDK.TemplateProcessor.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse CreateTemplateContext (TemplateContextRequest templateRequest);

        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> CreateTemplateContextWithHttpInfo (TemplateContextRequest templateRequest);
        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse DeleteTemplateContext (string templateId);

        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> DeleteTemplateContextWithHttpInfo (string templateId);
        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse GetTemplateContext (string templateId);

        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> GetTemplateContextWithHttpInfo (string templateId);
        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse UpdateTemplateContext (TemplateContext templateContext);

        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> UpdateTemplateContextWithHttpInfo (TemplateContext templateContext);
        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse UploadTemplateFile (string templateId, System.IO.Stream stream);

        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> UploadTemplateFileWithHttpInfo (string templateId, System.IO.Stream stream);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> CreateTemplateContextAsync (TemplateContextRequest templateRequest);

        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> CreateTemplateContextAsyncWithHttpInfo (TemplateContextRequest templateRequest);
        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> DeleteTemplateContextAsync (string templateId);

        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> DeleteTemplateContextAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> GetTemplateContextAsync (string templateId);

        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> GetTemplateContextAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> UpdateTemplateContextAsync (TemplateContext templateContext);

        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UpdateTemplateContextAsyncWithHttpInfo (TemplateContext templateContext);
        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> UploadTemplateFileAsync (string templateId, System.IO.Stream stream);

        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UploadTemplateFileAsyncWithHttpInfo (string templateId, System.IO.Stream stream);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateApi : ITemplateApi
    {
        private Sphereon.SDK.TemplateProcessor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.TemplateProcessor.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.TemplateProcessor.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.TemplateProcessor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse CreateTemplateContext (TemplateContextRequest templateRequest)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = CreateTemplateContextWithHttpInfo(templateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > CreateTemplateContextWithHttpInfo (TemplateContextRequest templateRequest)
        {
            // verify the required parameter 'templateRequest' is set
            if (templateRequest == null)
                throw new ApiException(400, "Missing required parameter 'templateRequest' when calling TemplateApi->CreateTemplateContext");

            var localVarPath = "/template/processor/0.1/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateRequest != null && templateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> CreateTemplateContextAsync (TemplateContextRequest templateRequest)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await CreateTemplateContextAsyncWithHttpInfo(templateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> CreateTemplateContextAsyncWithHttpInfo (TemplateContextRequest templateRequest)
        {
            // verify the required parameter 'templateRequest' is set
            if (templateRequest == null)
                throw new ApiException(400, "Missing required parameter 'templateRequest' when calling TemplateApi->CreateTemplateContext");

            var localVarPath = "/template/processor/0.1/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateRequest != null && templateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse DeleteTemplateContext (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = DeleteTemplateContextWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > DeleteTemplateContextWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteTemplateContext");

            var localVarPath = "/template/processor/0.1/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> DeleteTemplateContextAsync (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await DeleteTemplateContextAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> DeleteTemplateContextAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteTemplateContext");

            var localVarPath = "/template/processor/0.1/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse GetTemplateContext (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = GetTemplateContextWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > GetTemplateContextWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetTemplateContext");

            var localVarPath = "/template/processor/0.1/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> GetTemplateContextAsync (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await GetTemplateContextAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> GetTemplateContextAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetTemplateContext");

            var localVarPath = "/template/processor/0.1/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse UpdateTemplateContext (TemplateContext templateContext)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = UpdateTemplateContextWithHttpInfo(templateContext);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > UpdateTemplateContextWithHttpInfo (TemplateContext templateContext)
        {
            // verify the required parameter 'templateContext' is set
            if (templateContext == null)
                throw new ApiException(400, "Missing required parameter 'templateContext' when calling TemplateApi->UpdateTemplateContext");

            var localVarPath = "/template/processor/0.1/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateContext != null && templateContext.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateContext); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateContext; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> UpdateTemplateContextAsync (TemplateContext templateContext)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await UpdateTemplateContextAsyncWithHttpInfo(templateContext);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContext">templateContext</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UpdateTemplateContextAsyncWithHttpInfo (TemplateContext templateContext)
        {
            // verify the required parameter 'templateContext' is set
            if (templateContext == null)
                throw new ApiException(400, "Missing required parameter 'templateContext' when calling TemplateApi->UpdateTemplateContext");

            var localVarPath = "/template/processor/0.1/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateContext != null && templateContext.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateContext); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateContext; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse UploadTemplateFile (string templateId, System.IO.Stream stream)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = UploadTemplateFileWithHttpInfo(templateId, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > UploadTemplateFileWithHttpInfo (string templateId, System.IO.Stream stream)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UploadTemplateFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling TemplateApi->UploadTemplateFile");

            var localVarPath = "/template/processor/0.1/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> UploadTemplateFileAsync (string templateId, System.IO.Stream stream)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await UploadTemplateFileAsyncWithHttpInfo(templateId, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UploadTemplateFileAsyncWithHttpInfo (string templateId, System.IO.Stream stream)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UploadTemplateFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling TemplateApi->UploadTemplateFile");

            var localVarPath = "/template/processor/0.1/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
        }

    }
}
