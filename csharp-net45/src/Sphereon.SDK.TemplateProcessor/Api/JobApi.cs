/* 
 * Template-Processor
 *
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.TemplateProcessor.Client;
using Sphereon.SDK.TemplateProcessor.Model;

namespace Sphereon.SDK.TemplateProcessor.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>MergeJobResponse</returns>
        MergeJobResponse GetJob (string jobId);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        ApiResponse<MergeJobResponse> GetJobWithHttpInfo (string jobId);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>List&lt;MergeJobResponse&gt;</returns>
        List<MergeJobResponse> GetJobs (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of List&lt;MergeJobResponse&gt;</returns>
        ApiResponse<List<MergeJobResponse>> GetJobsWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>byte[]</returns>
        byte[] GetResultStream (string jobId, ResultStreamRequest resultStreamRequest);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetResultStreamWithHttpInfo (string jobId, ResultStreamRequest resultStreamRequest);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>byte[]</returns>
        byte[] GetResultStreamsAsContainer (string jobId, OutputSettings outputSettings = null);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetResultStreamsAsContainerWithHttpInfo (string jobId, OutputSettings outputSettings = null);
        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>MergeJobResponse</returns>
        MergeJobResponse SubmitJob (MergeSettings mergesettings);

        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        ApiResponse<MergeJobResponse> SubmitJobWithHttpInfo (MergeSettings mergesettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of MergeJobResponse</returns>
        System.Threading.Tasks.Task<MergeJobResponse> GetJobAsync (string jobId);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> GetJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of List&lt;MergeJobResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MergeJobResponse>> GetJobsAsync (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MergeJobResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MergeJobResponse>>> GetJobsAsyncWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetResultStreamAsync (string jobId, ResultStreamRequest resultStreamRequest);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamAsyncWithHttpInfo (string jobId, ResultStreamRequest resultStreamRequest);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetResultStreamsAsContainerAsync (string jobId, OutputSettings outputSettings = null);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamsAsContainerAsyncWithHttpInfo (string jobId, OutputSettings outputSettings = null);
        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of MergeJobResponse</returns>
        System.Threading.Tasks.Task<MergeJobResponse> SubmitJobAsync (MergeSettings mergesettings);

        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> SubmitJobAsyncWithHttpInfo (MergeSettings mergesettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobApi : IJobApi
    {
        private Sphereon.SDK.TemplateProcessor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.TemplateProcessor.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.TemplateProcessor.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.TemplateProcessor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>MergeJobResponse</returns>
        public MergeJobResponse GetJob (string jobId)
        {
             ApiResponse<MergeJobResponse> localVarResponse = GetJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        public ApiResponse< MergeJobResponse > GetJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetJob");

            var localVarPath = "/template/processor/0.1/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of MergeJobResponse</returns>
        public async System.Threading.Tasks.Task<MergeJobResponse> GetJobAsync (string jobId)
        {
             ApiResponse<MergeJobResponse> localVarResponse = await GetJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> GetJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetJob");

            var localVarPath = "/template/processor/0.1/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>List&lt;MergeJobResponse&gt;</returns>
        public List<MergeJobResponse> GetJobs (List<string> status = null)
        {
             ApiResponse<List<MergeJobResponse>> localVarResponse = GetJobsWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of List&lt;MergeJobResponse&gt;</returns>
        public ApiResponse< List<MergeJobResponse> > GetJobsWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/template/processor/0.1/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MergeJobResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MergeJobResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MergeJobResponse>)));
        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of List&lt;MergeJobResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MergeJobResponse>> GetJobsAsync (List<string> status = null)
        {
             ApiResponse<List<MergeJobResponse>> localVarResponse = await GetJobsAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MergeJobResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MergeJobResponse>>> GetJobsAsyncWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/template/processor/0.1/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MergeJobResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MergeJobResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MergeJobResponse>)));
        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>byte[]</returns>
        public byte[] GetResultStream (string jobId, ResultStreamRequest resultStreamRequest)
        {
             ApiResponse<byte[]> localVarResponse = GetResultStreamWithHttpInfo(jobId, resultStreamRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetResultStreamWithHttpInfo (string jobId, ResultStreamRequest resultStreamRequest)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetResultStream");
            // verify the required parameter 'resultStreamRequest' is set
            if (resultStreamRequest == null)
                throw new ApiException(400, "Missing required parameter 'resultStreamRequest' when calling JobApi->GetResultStream");

            var localVarPath = "/template/processor/0.1/jobs/{jobId}/result/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (resultStreamRequest != null && resultStreamRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resultStreamRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resultStreamRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetResultStreamAsync (string jobId, ResultStreamRequest resultStreamRequest)
        {
             ApiResponse<byte[]> localVarResponse = await GetResultStreamAsyncWithHttpInfo(jobId, resultStreamRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="resultStreamRequest">resultStreamRequest</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamAsyncWithHttpInfo (string jobId, ResultStreamRequest resultStreamRequest)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetResultStream");
            // verify the required parameter 'resultStreamRequest' is set
            if (resultStreamRequest == null)
                throw new ApiException(400, "Missing required parameter 'resultStreamRequest' when calling JobApi->GetResultStream");

            var localVarPath = "/template/processor/0.1/jobs/{jobId}/result/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (resultStreamRequest != null && resultStreamRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resultStreamRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resultStreamRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] GetResultStreamsAsContainer (string jobId, OutputSettings outputSettings = null)
        {
             ApiResponse<byte[]> localVarResponse = GetResultStreamsAsContainerWithHttpInfo(jobId, outputSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetResultStreamsAsContainerWithHttpInfo (string jobId, OutputSettings outputSettings = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetResultStreamsAsContainer");

            var localVarPath = "/template/processor/0.1/jobs/{jobId}/result/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (outputSettings != null && outputSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(outputSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = outputSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStreamsAsContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetResultStreamsAsContainerAsync (string jobId, OutputSettings outputSettings = null)
        {
             ApiResponse<byte[]> localVarResponse = await GetResultStreamsAsContainerAsyncWithHttpInfo(jobId, outputSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamsAsContainerAsyncWithHttpInfo (string jobId, OutputSettings outputSettings = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetResultStreamsAsContainer");

            var localVarPath = "/template/processor/0.1/jobs/{jobId}/result/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (outputSettings != null && outputSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(outputSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = outputSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStreamsAsContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>MergeJobResponse</returns>
        public MergeJobResponse SubmitJob (MergeSettings mergesettings)
        {
             ApiResponse<MergeJobResponse> localVarResponse = SubmitJobWithHttpInfo(mergesettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        public ApiResponse< MergeJobResponse > SubmitJobWithHttpInfo (MergeSettings mergesettings)
        {
            // verify the required parameter 'mergesettings' is set
            if (mergesettings == null)
                throw new ApiException(400, "Missing required parameter 'mergesettings' when calling JobApi->SubmitJob");

            var localVarPath = "/template/processor/0.1/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mergesettings != null && mergesettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergesettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergesettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of MergeJobResponse</returns>
        public async System.Threading.Tasks.Task<MergeJobResponse> SubmitJobAsync (MergeSettings mergesettings)
        {
             ApiResponse<MergeJobResponse> localVarResponse = await SubmitJobAsyncWithHttpInfo(mergesettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.TemplateProcessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> SubmitJobAsyncWithHttpInfo (MergeSettings mergesettings)
        {
            // verify the required parameter 'mergesettings' is set
            if (mergesettings == null)
                throw new ApiException(400, "Missing required parameter 'mergesettings' when calling JobApi->SubmitJob");

            var localVarPath = "/template/processor/0.1/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mergesettings != null && mergesettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergesettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergesettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
        }

    }
}
