/* 
 * Template-Processor
 *
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.TemplateProcessor.Client.SwaggerDateConverter;

namespace Sphereon.SDK.TemplateProcessor.Model
{
    /// <summary>
    /// A request to download a specific result stream.
    /// </summary>
    [DataContract]
    public partial class ResultStreamRequest :  IEquatable<ResultStreamRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultStreamRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResultStreamRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultStreamRequest" /> class.
        /// </summary>
        /// <param name="StreamLocation">The stream location (required).</param>
        /// <param name="OutputSettings">The Output settings.</param>
        public ResultStreamRequest(StreamLocation StreamLocation = default(StreamLocation), OutputSettings OutputSettings = default(OutputSettings))
        {
            // to ensure "StreamLocation" is required (not null)
            if (StreamLocation == null)
            {
                throw new InvalidDataException("StreamLocation is a required property for ResultStreamRequest and cannot be null");
            }
            else
            {
                this.StreamLocation = StreamLocation;
            }
            this.OutputSettings = OutputSettings;
        }
        
        /// <summary>
        /// The stream location
        /// </summary>
        /// <value>The stream location</value>
        [DataMember(Name="streamLocation", EmitDefaultValue=false)]
        public StreamLocation StreamLocation { get; set; }

        /// <summary>
        /// The Output settings
        /// </summary>
        /// <value>The Output settings</value>
        [DataMember(Name="outputSettings", EmitDefaultValue=false)]
        public OutputSettings OutputSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultStreamRequest {\n");
            sb.Append("  StreamLocation: ").Append(StreamLocation).Append("\n");
            sb.Append("  OutputSettings: ").Append(OutputSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ResultStreamRequest);
        }

        /// <summary>
        /// Returns true if ResultStreamRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ResultStreamRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultStreamRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StreamLocation == other.StreamLocation ||
                    this.StreamLocation != null &&
                    this.StreamLocation.Equals(other.StreamLocation)
                ) && 
                (
                    this.OutputSettings == other.OutputSettings ||
                    this.OutputSettings != null &&
                    this.OutputSettings.Equals(other.OutputSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StreamLocation != null)
                    hash = hash * 59 + this.StreamLocation.GetHashCode();
                if (this.OutputSettings != null)
                    hash = hash * 59 + this.OutputSettings.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
