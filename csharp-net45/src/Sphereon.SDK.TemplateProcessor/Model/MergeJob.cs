/* 
 * Template-Processor
 *
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.TemplateProcessor.Model
{
    /// <summary>
    /// The merge job. Has access to the job merge data.
    /// </summary>
    [DataContract]
    public partial class MergeJob :  IEquatable<MergeJob>
    {
        /// <summary>
        /// The status of the job
        /// </summary>
        /// <value>The status of the job</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CREATED for "CREATED"
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED,
            
            /// <summary>
            /// Enum UPDATED for "UPDATED"
            /// </summary>
            [EnumMember(Value = "UPDATED")]
            UPDATED,
            
            /// <summary>
            /// Enum PROCESSING for "PROCESSING"
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING,
            
            /// <summary>
            /// Enum DONE for "DONE"
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE,
            
            /// <summary>
            /// Enum ERROR for "ERROR"
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR,
            
            /// <summary>
            /// Enum DELETED for "DELETED"
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED
        }

        /// <summary>
        /// The status of the job
        /// </summary>
        /// <value>The status of the job</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MergeJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeJob" /> class.
        /// </summary>
        /// <param name="JobId">The server generated job jobId. This jobId is checked against the jobId in the request path on every invocation (required).</param>
        /// <param name="DataSetId">Data set id.</param>
        /// <param name="ResultStreams">The storage locations of the result files. (required).</param>
        /// <param name="HeaderDataSetIds">Header data set ids.</param>
        /// <param name="ResultStorageLocation">The storage location. (optional).</param>
        /// <param name="MergeSettings">MergeSettings.</param>
        public MergeJob(string JobId = null, string DataSetId = null, List<StreamLocation> ResultStreams = null, List<string> HeaderDataSetIds = null, StorageLocation ResultStorageLocation = null, MergeSettings MergeSettings = null)
        {
            // to ensure "JobId" is required (not null)
            if (JobId == null)
            {
                throw new InvalidDataException("JobId is a required property for MergeJob and cannot be null");
            }
            else
            {
                this.JobId = JobId;
            }
            // to ensure "ResultStreams" is required (not null)
            if (ResultStreams == null)
            {
                throw new InvalidDataException("ResultStreams is a required property for MergeJob and cannot be null");
            }
            else
            {
                this.ResultStreams = ResultStreams;
            }
            this.DataSetId = DataSetId;
            this.HeaderDataSetIds = HeaderDataSetIds;
            this.ResultStorageLocation = ResultStorageLocation;
            this.MergeSettings = MergeSettings;
        }
        
        /// <summary>
        /// The completion date/time of this job in ISO 8601 format
        /// </summary>
        /// <value>The completion date/time of this job in ISO 8601 format</value>
        [DataMember(Name="completionTime", EmitDefaultValue=false)]
        public DateTime? CompletionTime { get; private set; }
        /// <summary>
        /// The server generated job jobId. This jobId is checked against the jobId in the request path on every invocation
        /// </summary>
        /// <value>The server generated job jobId. This jobId is checked against the jobId in the request path on every invocation</value>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public string JobId { get; set; }
        /// <summary>
        /// The creation date/time of this job in ISO 8601 format
        /// </summary>
        /// <value>The creation date/time of this job in ISO 8601 format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; private set; }
        /// <summary>
        /// Data set id
        /// </summary>
        /// <value>Data set id</value>
        [DataMember(Name="dataSetId", EmitDefaultValue=false)]
        public string DataSetId { get; set; }
        /// <summary>
        /// The storage locations of the result files.
        /// </summary>
        /// <value>The storage locations of the result files.</value>
        [DataMember(Name="resultStreams", EmitDefaultValue=false)]
        public List<StreamLocation> ResultStreams { get; set; }
        /// <summary>
        /// Header data set ids
        /// </summary>
        /// <value>Header data set ids</value>
        [DataMember(Name="headerDataSetIds", EmitDefaultValue=false)]
        public List<string> HeaderDataSetIds { get; set; }
        /// <summary>
        /// The storage location. (optional)
        /// </summary>
        /// <value>The storage location. (optional)</value>
        [DataMember(Name="resultStorageLocation", EmitDefaultValue=false)]
        public StorageLocation ResultStorageLocation { get; set; }
        /// <summary>
        /// Gets or Sets MergeSettings
        /// </summary>
        [DataMember(Name="mergeSettings", EmitDefaultValue=false)]
        public MergeSettings MergeSettings { get; set; }
        /// <summary>
        /// A status message, which can be informational, warning or error. A message here does not indicate an error perse
        /// </summary>
        /// <value>A status message, which can be informational, warning or error. A message here does not indicate an error perse</value>
        [DataMember(Name="statusMessage", EmitDefaultValue=false)]
        public string StatusMessage { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MergeJob {\n");
            sb.Append("  CompletionTime: ").Append(CompletionTime).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  DataSetId: ").Append(DataSetId).Append("\n");
            sb.Append("  ResultStreams: ").Append(ResultStreams).Append("\n");
            sb.Append("  HeaderDataSetIds: ").Append(HeaderDataSetIds).Append("\n");
            sb.Append("  ResultStorageLocation: ").Append(ResultStorageLocation).Append("\n");
            sb.Append("  MergeSettings: ").Append(MergeSettings).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MergeJob);
        }

        /// <summary>
        /// Returns true if MergeJob instances are equal
        /// </summary>
        /// <param name="other">Instance of MergeJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MergeJob other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompletionTime == other.CompletionTime ||
                    this.CompletionTime != null &&
                    this.CompletionTime.Equals(other.CompletionTime)
                ) && 
                (
                    this.JobId == other.JobId ||
                    this.JobId != null &&
                    this.JobId.Equals(other.JobId)
                ) && 
                (
                    this.CreationTime == other.CreationTime ||
                    this.CreationTime != null &&
                    this.CreationTime.Equals(other.CreationTime)
                ) && 
                (
                    this.DataSetId == other.DataSetId ||
                    this.DataSetId != null &&
                    this.DataSetId.Equals(other.DataSetId)
                ) && 
                (
                    this.ResultStreams == other.ResultStreams ||
                    this.ResultStreams != null &&
                    this.ResultStreams.SequenceEqual(other.ResultStreams)
                ) && 
                (
                    this.HeaderDataSetIds == other.HeaderDataSetIds ||
                    this.HeaderDataSetIds != null &&
                    this.HeaderDataSetIds.SequenceEqual(other.HeaderDataSetIds)
                ) && 
                (
                    this.ResultStorageLocation == other.ResultStorageLocation ||
                    this.ResultStorageLocation != null &&
                    this.ResultStorageLocation.Equals(other.ResultStorageLocation)
                ) && 
                (
                    this.MergeSettings == other.MergeSettings ||
                    this.MergeSettings != null &&
                    this.MergeSettings.Equals(other.MergeSettings)
                ) && 
                (
                    this.StatusMessage == other.StatusMessage ||
                    this.StatusMessage != null &&
                    this.StatusMessage.Equals(other.StatusMessage)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompletionTime != null)
                    hash = hash * 59 + this.CompletionTime.GetHashCode();
                if (this.JobId != null)
                    hash = hash * 59 + this.JobId.GetHashCode();
                if (this.CreationTime != null)
                    hash = hash * 59 + this.CreationTime.GetHashCode();
                if (this.DataSetId != null)
                    hash = hash * 59 + this.DataSetId.GetHashCode();
                if (this.ResultStreams != null)
                    hash = hash * 59 + this.ResultStreams.GetHashCode();
                if (this.HeaderDataSetIds != null)
                    hash = hash * 59 + this.HeaderDataSetIds.GetHashCode();
                if (this.ResultStorageLocation != null)
                    hash = hash * 59 + this.ResultStorageLocation.GetHashCode();
                if (this.MergeSettings != null)
                    hash = hash * 59 + this.MergeSettings.GetHashCode();
                if (this.StatusMessage != null)
                    hash = hash * 59 + this.StatusMessage.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }
    }

}
