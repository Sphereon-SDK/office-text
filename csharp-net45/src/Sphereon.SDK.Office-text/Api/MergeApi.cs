/* 
 * OfficeTextMerge
 *
 * <b>The Office Text API can generate office documents from a template and a JSON data file<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Office-text.Client;
using Sphereon.SDK.Office-text.Model;

namespace Sphereon.SDK.Office-text.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMergeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Store dataset
        /// </summary>
        /// <remarks>
        /// Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>DataSetResponse</returns>
        DataSetResponse CreateDataSet (string payload);

        /// <summary>
        /// Store dataset
        /// </summary>
        /// <remarks>
        /// Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>ApiResponse of DataSetResponse</returns>
        ApiResponse<DataSetResponse> CreateDataSetWithHttpInfo (string payload);
        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse CreateTemplateContext (TemplateContextRequest templateRequest);

        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> CreateTemplateContextWithHttpInfo (TemplateContextRequest templateRequest);
        /// <summary>
        /// Delete a stored data set
        /// </summary>
        /// <remarks>
        /// Delete a stored data set
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>DataSetResponse</returns>
        DataSetResponse DeleteDataSet (string dataSetId);

        /// <summary>
        /// Delete a stored data set
        /// </summary>
        /// <remarks>
        /// Delete a stored data set
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>ApiResponse of DataSetResponse</returns>
        ApiResponse<DataSetResponse> DeleteDataSetWithHttpInfo (string dataSetId);
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the merge job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>MergeJobResponse</returns>
        MergeJobResponse DeleteJob (string jobId);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the merge job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        ApiResponse<MergeJobResponse> DeleteJobWithHttpInfo (string jobId);
        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse DeleteTemplateContext (string templateId);

        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> DeleteTemplateContextWithHttpInfo (string templateId);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>MergeJobResponse</returns>
        MergeJobResponse GetJob (string jobId);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        ApiResponse<MergeJobResponse> GetJobWithHttpInfo (string jobId);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>List&lt;MergeJobResponse&gt;</returns>
        List<MergeJobResponse> GetJobs (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of List&lt;MergeJobResponse&gt;</returns>
        ApiResponse<List<MergeJobResponse>> GetJobsWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>byte[]</returns>
        byte[] GetResultStreamById (string jobId, string streamId, OutputSettings outputSettings = null);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetResultStreamByIdWithHttpInfo (string jobId, string streamId, OutputSettings outputSettings = null);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>byte[]</returns>
        byte[] GetResultStreamsAsContainer (string jobId, OutputSettings outputSettings = null);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetResultStreamsAsContainerWithHttpInfo (string jobId, OutputSettings outputSettings = null);
        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse GetTemplateContext (string templateId);

        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> GetTemplateContextWithHttpInfo (string templateId);
        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>MergeJobResponse</returns>
        MergeJobResponse SubmitJob (MergeSettings mergesettings);

        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        ApiResponse<MergeJobResponse> SubmitJobWithHttpInfo (MergeSettings mergesettings);
        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse UpdateTemplateContext (TemplateContextRequest templateContextRequest);

        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> UpdateTemplateContextWithHttpInfo (TemplateContextRequest templateContextRequest);
        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>TemplateContextResponse</returns>
        TemplateContextResponse UploadTemplateFile (string templateId, System.IO.Stream stream);

        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        ApiResponse<TemplateContextResponse> UploadTemplateFileWithHttpInfo (string templateId, System.IO.Stream stream);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Store dataset
        /// </summary>
        /// <remarks>
        /// Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>Task of DataSetResponse</returns>
        System.Threading.Tasks.Task<DataSetResponse> CreateDataSetAsync (string payload);

        /// <summary>
        /// Store dataset
        /// </summary>
        /// <remarks>
        /// Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>Task of ApiResponse (DataSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSetResponse>> CreateDataSetAsyncWithHttpInfo (string payload);
        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> CreateTemplateContextAsync (TemplateContextRequest templateRequest);

        /// <summary>
        /// Create template context
        /// </summary>
        /// <remarks>
        /// Create a unique template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> CreateTemplateContextAsyncWithHttpInfo (TemplateContextRequest templateRequest);
        /// <summary>
        /// Delete a stored data set
        /// </summary>
        /// <remarks>
        /// Delete a stored data set
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>Task of DataSetResponse</returns>
        System.Threading.Tasks.Task<DataSetResponse> DeleteDataSetAsync (string dataSetId);

        /// <summary>
        /// Delete a stored data set
        /// </summary>
        /// <remarks>
        /// Delete a stored data set
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>Task of ApiResponse (DataSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSetResponse>> DeleteDataSetAsyncWithHttpInfo (string dataSetId);
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the merge job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of MergeJobResponse</returns>
        System.Threading.Tasks.Task<MergeJobResponse> DeleteJobAsync (string jobId);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the merge job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> DeleteJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> DeleteTemplateContextAsync (string templateId);

        /// <summary>
        /// Delete template context
        /// </summary>
        /// <remarks>
        /// Delete a template context with all history
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> DeleteTemplateContextAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of MergeJobResponse</returns>
        System.Threading.Tasks.Task<MergeJobResponse> GetJobAsync (string jobId);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> GetJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of List&lt;MergeJobResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MergeJobResponse>> GetJobsAsync (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all office text job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MergeJobResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MergeJobResponse>>> GetJobsAsyncWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetResultStreamByIdAsync (string jobId, string streamId, OutputSettings outputSettings = null);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get a merge result document as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamByIdAsyncWithHttpInfo (string jobId, string streamId, OutputSettings outputSettings = null);
        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetResultStreamsAsContainerAsync (string jobId, OutputSettings outputSettings = null);

        /// <summary>
        /// Get the result file
        /// </summary>
        /// <remarks>
        /// Get all documents inside a compressed container as a binary stream.   
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamsAsContainerAsyncWithHttpInfo (string jobId, OutputSettings outputSettings = null);
        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> GetTemplateContextAsync (string templateId);

        /// <summary>
        /// Get template context
        /// </summary>
        /// <remarks>
        /// Get an existing template context
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> GetTemplateContextAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of MergeJobResponse</returns>
        System.Threading.Tasks.Task<MergeJobResponse> SubmitJobAsync (MergeSettings mergesettings);

        /// <summary>
        /// Submit merge job for processing
        /// </summary>
        /// <remarks>
        /// Submit merge job run.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> SubmitJobAsyncWithHttpInfo (MergeSettings mergesettings);
        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> UpdateTemplateContextAsync (TemplateContextRequest templateContextRequest);

        /// <summary>
        /// Update template context
        /// </summary>
        /// <remarks>
        /// Update an existing template context for your environment
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UpdateTemplateContextAsyncWithHttpInfo (TemplateContextRequest templateContextRequest);
        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of TemplateContextResponse</returns>
        System.Threading.Tasks.Task<TemplateContextResponse> UploadTemplateFileAsync (string templateId, System.IO.Stream stream);

        /// <summary>
        /// Upload template file
        /// </summary>
        /// <remarks>
        /// Upload the Office template file
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UploadTemplateFileAsyncWithHttpInfo (string templateId, System.IO.Stream stream);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MergeApi : IMergeApi
    {
        private Sphereon.SDK.Office-text.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MergeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MergeApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Office-text.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MergeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MergeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Office-text.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Office-text.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Store dataset Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>DataSetResponse</returns>
        public DataSetResponse CreateDataSet (string payload)
        {
             ApiResponse<DataSetResponse> localVarResponse = CreateDataSetWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store dataset Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>ApiResponse of DataSetResponse</returns>
        public ApiResponse< DataSetResponse > CreateDataSetWithHttpInfo (string payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling MergeApi->CreateDataSet");

            var localVarPath = "/office-text/merge/0.1.0/datasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSetResponse)));
            
        }

        /// <summary>
        /// Store dataset Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>Task of DataSetResponse</returns>
        public async System.Threading.Tasks.Task<DataSetResponse> CreateDataSetAsync (string payload)
        {
             ApiResponse<DataSetResponse> localVarResponse = await CreateDataSetAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store dataset Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]</param>
        /// <returns>Task of ApiResponse (DataSetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataSetResponse>> CreateDataSetAsyncWithHttpInfo (string payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling MergeApi->CreateDataSet");

            var localVarPath = "/office-text/merge/0.1.0/datasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSetResponse)));
            
        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse CreateTemplateContext (TemplateContextRequest templateRequest)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = CreateTemplateContextWithHttpInfo(templateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > CreateTemplateContextWithHttpInfo (TemplateContextRequest templateRequest)
        {
            // verify the required parameter 'templateRequest' is set
            if (templateRequest == null)
                throw new ApiException(400, "Missing required parameter 'templateRequest' when calling MergeApi->CreateTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateRequest != null && templateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> CreateTemplateContextAsync (TemplateContextRequest templateRequest)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await CreateTemplateContextAsyncWithHttpInfo(templateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create template context Create a unique template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequest">The template request</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> CreateTemplateContextAsyncWithHttpInfo (TemplateContextRequest templateRequest)
        {
            // verify the required parameter 'templateRequest' is set
            if (templateRequest == null)
                throw new ApiException(400, "Missing required parameter 'templateRequest' when calling MergeApi->CreateTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateRequest != null && templateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Delete a stored data set Delete a stored data set
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>DataSetResponse</returns>
        public DataSetResponse DeleteDataSet (string dataSetId)
        {
             ApiResponse<DataSetResponse> localVarResponse = DeleteDataSetWithHttpInfo(dataSetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a stored data set Delete a stored data set
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>ApiResponse of DataSetResponse</returns>
        public ApiResponse< DataSetResponse > DeleteDataSetWithHttpInfo (string dataSetId)
        {
            // verify the required parameter 'dataSetId' is set
            if (dataSetId == null)
                throw new ApiException(400, "Missing required parameter 'dataSetId' when calling MergeApi->DeleteDataSet");

            var localVarPath = "/office-text/merge/0.1.0/datasets/{dataSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dataSetId != null) localVarPathParams.Add("dataSetId", Configuration.ApiClient.ParameterToString(dataSetId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDataSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSetResponse)));
            
        }

        /// <summary>
        /// Delete a stored data set Delete a stored data set
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>Task of DataSetResponse</returns>
        public async System.Threading.Tasks.Task<DataSetResponse> DeleteDataSetAsync (string dataSetId)
        {
             ApiResponse<DataSetResponse> localVarResponse = await DeleteDataSetAsyncWithHttpInfo(dataSetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a stored data set Delete a stored data set
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSetId">dataSetId</param>
        /// <returns>Task of ApiResponse (DataSetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataSetResponse>> DeleteDataSetAsyncWithHttpInfo (string dataSetId)
        {
            // verify the required parameter 'dataSetId' is set
            if (dataSetId == null)
                throw new ApiException(400, "Missing required parameter 'dataSetId' when calling MergeApi->DeleteDataSet");

            var localVarPath = "/office-text/merge/0.1.0/datasets/{dataSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dataSetId != null) localVarPathParams.Add("dataSetId", Configuration.ApiClient.ParameterToString(dataSetId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDataSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSetResponse)));
            
        }

        /// <summary>
        /// Delete a job manually Delete the merge job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>MergeJobResponse</returns>
        public MergeJobResponse DeleteJob (string jobId)
        {
             ApiResponse<MergeJobResponse> localVarResponse = DeleteJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a job manually Delete the merge job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        public ApiResponse< MergeJobResponse > DeleteJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->DeleteJob");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
            
        }

        /// <summary>
        /// Delete a job manually Delete the merge job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of MergeJobResponse</returns>
        public async System.Threading.Tasks.Task<MergeJobResponse> DeleteJobAsync (string jobId)
        {
             ApiResponse<MergeJobResponse> localVarResponse = await DeleteJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a job manually Delete the merge job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> DeleteJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->DeleteJob");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
            
        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse DeleteTemplateContext (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = DeleteTemplateContextWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > DeleteTemplateContextWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MergeApi->DeleteTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> DeleteTemplateContextAsync (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await DeleteTemplateContextAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete template context Delete a template context with all history
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">templateId</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> DeleteTemplateContextAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MergeApi->DeleteTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>MergeJobResponse</returns>
        public MergeJobResponse GetJob (string jobId)
        {
             ApiResponse<MergeJobResponse> localVarResponse = GetJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        public ApiResponse< MergeJobResponse > GetJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->GetJob");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
            
        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of MergeJobResponse</returns>
        public async System.Threading.Tasks.Task<MergeJobResponse> GetJobAsync (string jobId)
        {
             ApiResponse<MergeJobResponse> localVarResponse = await GetJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Job definition and state Get the merge job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> GetJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->GetJob");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
            
        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>List&lt;MergeJobResponse&gt;</returns>
        public List<MergeJobResponse> GetJobs (List<string> status = null)
        {
             ApiResponse<List<MergeJobResponse>> localVarResponse = GetJobsWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of List&lt;MergeJobResponse&gt;</returns>
        public ApiResponse< List<MergeJobResponse> > GetJobsWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/office-text/merge/0.1.0/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MergeJobResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MergeJobResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MergeJobResponse>)));
            
        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of List&lt;MergeJobResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MergeJobResponse>> GetJobsAsync (List<string> status = null)
        {
             ApiResponse<List<MergeJobResponse>> localVarResponse = await GetJobsAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all jobs Get all office text job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MergeJobResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MergeJobResponse>>> GetJobsAsyncWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/office-text/merge/0.1.0/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MergeJobResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MergeJobResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MergeJobResponse>)));
            
        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] GetResultStreamById (string jobId, string streamId, OutputSettings outputSettings = null)
        {
             ApiResponse<byte[]> localVarResponse = GetResultStreamByIdWithHttpInfo(jobId, streamId, outputSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetResultStreamByIdWithHttpInfo (string jobId, string streamId, OutputSettings outputSettings = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->GetResultStreamById");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling MergeApi->GetResultStreamById");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}/result/file/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (streamId != null) localVarPathParams.Add("streamId", Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (outputSettings != null && outputSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(outputSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = outputSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStreamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetResultStreamByIdAsync (string jobId, string streamId, OutputSettings outputSettings = null)
        {
             ApiResponse<byte[]> localVarResponse = await GetResultStreamByIdAsyncWithHttpInfo(jobId, streamId, outputSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the result file Get a merge result document as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="streamId">streamId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamByIdAsyncWithHttpInfo (string jobId, string streamId, OutputSettings outputSettings = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->GetResultStreamById");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling MergeApi->GetResultStreamById");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}/result/file/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (streamId != null) localVarPathParams.Add("streamId", Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (outputSettings != null && outputSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(outputSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = outputSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStreamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] GetResultStreamsAsContainer (string jobId, OutputSettings outputSettings = null)
        {
             ApiResponse<byte[]> localVarResponse = GetResultStreamsAsContainerWithHttpInfo(jobId, outputSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetResultStreamsAsContainerWithHttpInfo (string jobId, OutputSettings outputSettings = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->GetResultStreamsAsContainer");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}/result/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (outputSettings != null && outputSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(outputSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = outputSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStreamsAsContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetResultStreamsAsContainerAsync (string jobId, OutputSettings outputSettings = null)
        {
             ApiResponse<byte[]> localVarResponse = await GetResultStreamsAsContainerAsyncWithHttpInfo(jobId, outputSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the result file Get all documents inside a compressed container as a binary stream.   
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="outputSettings">outputSettings (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetResultStreamsAsContainerAsyncWithHttpInfo (string jobId, OutputSettings outputSettings = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling MergeApi->GetResultStreamsAsContainer");

            var localVarPath = "/office-text/merge/0.1.0/jobs/{jobId}/result/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (outputSettings != null && outputSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(outputSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = outputSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultStreamsAsContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse GetTemplateContext (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = GetTemplateContextWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > GetTemplateContextWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MergeApi->GetTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> GetTemplateContextAsync (string templateId)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await GetTemplateContextAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get template context Get an existing template context
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> GetTemplateContextAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MergeApi->GetTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>MergeJobResponse</returns>
        public MergeJobResponse SubmitJob (MergeSettings mergesettings)
        {
             ApiResponse<MergeJobResponse> localVarResponse = SubmitJobWithHttpInfo(mergesettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>ApiResponse of MergeJobResponse</returns>
        public ApiResponse< MergeJobResponse > SubmitJobWithHttpInfo (MergeSettings mergesettings)
        {
            // verify the required parameter 'mergesettings' is set
            if (mergesettings == null)
                throw new ApiException(400, "Missing required parameter 'mergesettings' when calling MergeApi->SubmitJob");

            var localVarPath = "/office-text/merge/0.1.0/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (mergesettings != null && mergesettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergesettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergesettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
            
        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of MergeJobResponse</returns>
        public async System.Threading.Tasks.Task<MergeJobResponse> SubmitJobAsync (MergeSettings mergesettings)
        {
             ApiResponse<MergeJobResponse> localVarResponse = await SubmitJobAsyncWithHttpInfo(mergesettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit merge job for processing Submit merge job run.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergesettings">The merge- and output settings</param>
        /// <returns>Task of ApiResponse (MergeJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeJobResponse>> SubmitJobAsyncWithHttpInfo (MergeSettings mergesettings)
        {
            // verify the required parameter 'mergesettings' is set
            if (mergesettings == null)
                throw new ApiException(400, "Missing required parameter 'mergesettings' when calling MergeApi->SubmitJob");

            var localVarPath = "/office-text/merge/0.1.0/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (mergesettings != null && mergesettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergesettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergesettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeJobResponse)));
            
        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse UpdateTemplateContext (TemplateContextRequest templateContextRequest)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = UpdateTemplateContextWithHttpInfo(templateContextRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > UpdateTemplateContextWithHttpInfo (TemplateContextRequest templateContextRequest)
        {
            // verify the required parameter 'templateContextRequest' is set
            if (templateContextRequest == null)
                throw new ApiException(400, "Missing required parameter 'templateContextRequest' when calling MergeApi->UpdateTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateContextRequest != null && templateContextRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateContextRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateContextRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> UpdateTemplateContextAsync (TemplateContextRequest templateContextRequest)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await UpdateTemplateContextAsyncWithHttpInfo(templateContextRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update template context Update an existing template context for your environment
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateContextRequest">templateContextRequest</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UpdateTemplateContextAsyncWithHttpInfo (TemplateContextRequest templateContextRequest)
        {
            // verify the required parameter 'templateContextRequest' is set
            if (templateContextRequest == null)
                throw new ApiException(400, "Missing required parameter 'templateContextRequest' when calling MergeApi->UpdateTemplateContext");

            var localVarPath = "/office-text/merge/0.1.0/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateContextRequest != null && templateContextRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateContextRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateContextRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>TemplateContextResponse</returns>
        public TemplateContextResponse UploadTemplateFile (string templateId, System.IO.Stream stream)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = UploadTemplateFileWithHttpInfo(templateId, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>ApiResponse of TemplateContextResponse</returns>
        public ApiResponse< TemplateContextResponse > UploadTemplateFileWithHttpInfo (string templateId, System.IO.Stream stream)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MergeApi->UploadTemplateFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling MergeApi->UploadTemplateFile");

            var localVarPath = "/office-text/merge/0.1.0/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of TemplateContextResponse</returns>
        public async System.Threading.Tasks.Task<TemplateContextResponse> UploadTemplateFileAsync (string templateId, System.IO.Stream stream)
        {
             ApiResponse<TemplateContextResponse> localVarResponse = await UploadTemplateFileAsyncWithHttpInfo(templateId, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload template file Upload the Office template file
        /// </summary>
        /// <exception cref="Sphereon.SDK.Office-text.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template context name unique for your environment</param>
        /// <param name="stream">The template (file/inputstream) to store</param>
        /// <returns>Task of ApiResponse (TemplateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateContextResponse>> UploadTemplateFileAsyncWithHttpInfo (string templateId, System.IO.Stream stream)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MergeApi->UploadTemplateFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling MergeApi->UploadTemplateFile");

            var localVarPath = "/office-text/merge/0.1.0/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateContextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateContextResponse)));
            
        }

    }
}
