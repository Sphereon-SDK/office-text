/**
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TemplateProcessor);
  }
}(this, function(expect, TemplateProcessor) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TemplateProcessor.TemplateContext();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TemplateContext', function() {
    it('should create an instance of TemplateContext', function() {
      // uncomment below and update the code to test TemplateContext
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be.a(TemplateProcessor.TemplateContext);
    });

    it('should have the property templateType (base name: "templateType")', function() {
      // uncomment below and update the code to test the property templateType
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

    it('should have the property templateFileLocations (base name: "templateFileLocations")', function() {
      // uncomment below and update the code to test the property templateFileLocations
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

    it('should have the property ownerInfo (base name: "ownerInfo")', function() {
      // uncomment below and update the code to test the property ownerInfo
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

    it('should have the property storageLocation (base name: "storageLocation")', function() {
      // uncomment below and update the code to test the property storageLocation
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

    it('should have the property templateId (base name: "templateId")', function() {
      // uncomment below and update the code to test the property templateId
      //var instane = new TemplateProcessor.TemplateContext();
      //expect(instance).to.be();
    });

  });

}));
