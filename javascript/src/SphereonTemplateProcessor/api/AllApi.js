/**
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonTemplateProcessor/ApiClient', 'SphereonTemplateProcessor/model/DataSetResponse', 'SphereonTemplateProcessor/model/ErrorResponse', 'SphereonTemplateProcessor/model/MergeJobResponse', 'SphereonTemplateProcessor/model/MergeSettings', 'SphereonTemplateProcessor/model/OutputSettings', 'SphereonTemplateProcessor/model/ResultStreamRequest', 'SphereonTemplateProcessor/model/TemplateContext', 'SphereonTemplateProcessor/model/TemplateContextRequest', 'SphereonTemplateProcessor/model/TemplateContextResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataSetResponse'), require('../model/ErrorResponse'), require('../model/MergeJobResponse'), require('../model/MergeSettings'), require('../model/OutputSettings'), require('../model/ResultStreamRequest'), require('../model/TemplateContext'), require('../model/TemplateContextRequest'), require('../model/TemplateContextResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.TemplateProcessor) {
      root.TemplateProcessor = {};
    }
    root.TemplateProcessor.AllApi = factory(root.TemplateProcessor.ApiClient, root.TemplateProcessor.DataSetResponse, root.TemplateProcessor.ErrorResponse, root.TemplateProcessor.MergeJobResponse, root.TemplateProcessor.MergeSettings, root.TemplateProcessor.OutputSettings, root.TemplateProcessor.ResultStreamRequest, root.TemplateProcessor.TemplateContext, root.TemplateProcessor.TemplateContextRequest, root.TemplateProcessor.TemplateContextResponse);
  }
}(this, function(ApiClient, DataSetResponse, ErrorResponse, MergeJobResponse, MergeSettings, OutputSettings, ResultStreamRequest, TemplateContext, TemplateContextRequest, TemplateContextResponse) {
  'use strict';

  /**
   * All service.
   * @module SphereonTemplateProcessor/api/AllApi
   * @version 0.1
   */

  /**
   * Constructs a new AllApi. 
   * @alias module:SphereonTemplateProcessor/api/AllApi
   * @class
   * @param {module:SphereonTemplateProcessor/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonTemplateProcessor/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDataSet operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~createDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/DataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store dataset
     * Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
     * @param {String} payload The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]
     * @param {module:SphereonTemplateProcessor/api/AllApi~createDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/DataSetResponse}
     */
    this.createDataSet = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createDataSet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = DataSetResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~createTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create template context
     * Create a unique template context for your environment
     * @param {module:SphereonTemplateProcessor/model/TemplateContextRequest} templateRequest The template request
     * @param {module:SphereonTemplateProcessor/api/AllApi~createTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.createTemplateContext = function(templateRequest, callback) {
      var postBody = templateRequest;

      // verify the required parameter 'templateRequest' is set
      if (templateRequest === undefined || templateRequest === null) {
        throw new Error("Missing the required parameter 'templateRequest' when calling createTemplateContext");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSet operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~deleteDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/DataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stored data set
     * Delete a stored data set
     * @param {String} dataSetId dataSetId
     * @param {module:SphereonTemplateProcessor/api/AllApi~deleteDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/DataSetResponse}
     */
    this.deleteDataSet = function(dataSetId, callback) {
      var postBody = null;

      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling deleteDataSet");
      }


      var pathParams = {
        'dataSetId': dataSetId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = DataSetResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/datasets/{dataSetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/MergeJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a job manually
     * Delete the merge job and all related files
     * @param {String} jobId jobId
     * @param {module:SphereonTemplateProcessor/api/AllApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/MergeJobResponse}
     */
    this.deleteJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MergeJobResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~deleteTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete template context
     * Delete a template context with all history
     * @param {String} templateId templateId
     * @param {module:SphereonTemplateProcessor/api/AllApi~deleteTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.deleteTemplateContext = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteTemplateContext");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates/{templateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/MergeJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job definition and state
     * Get the merge job definition and current state. Please not that you can differentiate based on http response status
     * @param {String} jobId jobId
     * @param {module:SphereonTemplateProcessor/api/AllApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/MergeJobResponse}
     */
    this.getJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MergeJobResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:SphereonTemplateProcessor/model/MergeJobResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all jobs
     * Get all office text job definitions and their current state.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:SphereonTemplateProcessor/model/String>} opts.status A list of status to filter on.
     * @param {module:SphereonTemplateProcessor/api/AllApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:SphereonTemplateProcessor/model/MergeJobResponse>}
     */
    this.getJobs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [MergeJobResponse];

      return this.apiClient.callApi(
        '/template/processor/0.1/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResultStream operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~getResultStreamCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the result file
     * Get a merge result document as a binary stream.   
     * @param {String} jobId jobId
     * @param {module:SphereonTemplateProcessor/model/ResultStreamRequest} resultStreamRequest resultStreamRequest
     * @param {module:SphereonTemplateProcessor/api/AllApi~getResultStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getResultStream = function(jobId, resultStreamRequest, callback) {
      var postBody = resultStreamRequest;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getResultStream");
      }

      // verify the required parameter 'resultStreamRequest' is set
      if (resultStreamRequest === undefined || resultStreamRequest === null) {
        throw new Error("Missing the required parameter 'resultStreamRequest' when calling getResultStream");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/template/processor/0.1/jobs/{jobId}/result/stream', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResultStreamsAsContainer operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~getResultStreamsAsContainerCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the result file
     * Get all documents inside a compressed container as a binary stream.   
     * @param {String} jobId jobId
     * @param {Object} opts Optional parameters
     * @param {module:SphereonTemplateProcessor/model/OutputSettings} opts.outputSettings outputSettings
     * @param {module:SphereonTemplateProcessor/api/AllApi~getResultStreamsAsContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getResultStreamsAsContainer = function(jobId, opts, callback) {
      opts = opts || {};
      var postBody = opts['outputSettings'];

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getResultStreamsAsContainer");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/template/processor/0.1/jobs/{jobId}/result/container', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~getTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get template context
     * Get an existing template context
     * @param {String} templateId The template context name unique for your environment
     * @param {module:SphereonTemplateProcessor/api/AllApi~getTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.getTemplateContext = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateContext");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates/{templateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitJob operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~submitJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/MergeJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit merge job for processing
     * Submit merge job run.
     * @param {module:SphereonTemplateProcessor/model/MergeSettings} mergesettings The merge- and output settings
     * @param {module:SphereonTemplateProcessor/api/AllApi~submitJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/MergeJobResponse}
     */
    this.submitJob = function(mergesettings, callback) {
      var postBody = mergesettings;

      // verify the required parameter 'mergesettings' is set
      if (mergesettings === undefined || mergesettings === null) {
        throw new Error("Missing the required parameter 'mergesettings' when calling submitJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MergeJobResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/jobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~updateTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update template context
     * Update an existing template context for your environment
     * @param {module:SphereonTemplateProcessor/model/TemplateContext} templateContext templateContext
     * @param {module:SphereonTemplateProcessor/api/AllApi~updateTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.updateTemplateContext = function(templateContext, callback) {
      var postBody = templateContext;

      // verify the required parameter 'templateContext' is set
      if (templateContext === undefined || templateContext === null) {
        throw new Error("Missing the required parameter 'templateContext' when calling updateTemplateContext");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadTemplateFile operation.
     * @callback module:SphereonTemplateProcessor/api/AllApi~uploadTemplateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload template file
     * Upload the Office template file
     * @param {String} templateId The template context name unique for your environment
     * @param {File} stream The template (file/inputstream) to store
     * @param {module:SphereonTemplateProcessor/api/AllApi~uploadTemplateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.uploadTemplateFile = function(templateId, stream, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling uploadTemplateFile");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling uploadTemplateFile");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates/{templateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
