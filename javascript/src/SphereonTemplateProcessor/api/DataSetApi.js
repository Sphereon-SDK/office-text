/**
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonTemplateProcessor/ApiClient', 'SphereonTemplateProcessor/model/DataSetResponse', 'SphereonTemplateProcessor/model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataSetResponse'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.TemplateProcessor) {
      root.TemplateProcessor = {};
    }
    root.TemplateProcessor.DataSetApi = factory(root.TemplateProcessor.ApiClient, root.TemplateProcessor.DataSetResponse, root.TemplateProcessor.ErrorResponse);
  }
}(this, function(ApiClient, DataSetResponse, ErrorResponse) {
  'use strict';

  /**
   * DataSet service.
   * @module SphereonTemplateProcessor/api/DataSetApi
   * @version 0.1
   */

  /**
   * Constructs a new DataSetApi. 
   * @alias module:SphereonTemplateProcessor/api/DataSetApi
   * @class
   * @param {module:SphereonTemplateProcessor/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonTemplateProcessor/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDataSet operation.
     * @callback module:SphereonTemplateProcessor/api/DataSetApi~createDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/DataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store dataset
     * Upload and store a data set. Currently only JSON is supported. This call returns an id which can be specified when submitting a merge job.
     * @param {String} payload The dates for the merge [   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   },   {     \&quot;Field1\&quot;: \&quot;Field1 value\&quot;,     \&quot;Field2\&quot;: \&quot;Field2 value\&quot;,   } ]
     * @param {module:SphereonTemplateProcessor/api/DataSetApi~createDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/DataSetResponse}
     */
    this.createDataSet = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload == undefined || payload == null) {
        throw "Missing the required parameter 'payload' when calling createDataSet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = DataSetResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSet operation.
     * @callback module:SphereonTemplateProcessor/api/DataSetApi~deleteDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/DataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stored data set
     * Delete a stored data set
     * @param {String} dataSetId dataSetId
     * @param {module:SphereonTemplateProcessor/api/DataSetApi~deleteDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/DataSetResponse}
     */
    this.deleteDataSet = function(dataSetId, callback) {
      var postBody = null;

      // verify the required parameter 'dataSetId' is set
      if (dataSetId == undefined || dataSetId == null) {
        throw "Missing the required parameter 'dataSetId' when calling deleteDataSet";
      }


      var pathParams = {
        'dataSetId': dataSetId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = DataSetResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/datasets/{dataSetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
