/**
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonTemplateProcessor/ApiClient', 'SphereonTemplateProcessor/model/ErrorResponse', 'SphereonTemplateProcessor/model/TemplateContext', 'SphereonTemplateProcessor/model/TemplateContextRequest', 'SphereonTemplateProcessor/model/TemplateContextResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/TemplateContext'), require('../model/TemplateContextRequest'), require('../model/TemplateContextResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.TemplateProcessor) {
      root.TemplateProcessor = {};
    }
    root.TemplateProcessor.TemplateApi = factory(root.TemplateProcessor.ApiClient, root.TemplateProcessor.ErrorResponse, root.TemplateProcessor.TemplateContext, root.TemplateProcessor.TemplateContextRequest, root.TemplateProcessor.TemplateContextResponse);
  }
}(this, function(ApiClient, ErrorResponse, TemplateContext, TemplateContextRequest, TemplateContextResponse) {
  'use strict';

  /**
   * Template service.
   * @module SphereonTemplateProcessor/api/TemplateApi
   * @version 0.1
   */

  /**
   * Constructs a new TemplateApi. 
   * @alias module:SphereonTemplateProcessor/api/TemplateApi
   * @class
   * @param {module:SphereonTemplateProcessor/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonTemplateProcessor/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/TemplateApi~createTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create template context
     * Create a unique template context for your environment
     * @param {module:SphereonTemplateProcessor/model/TemplateContextRequest} templateRequest The template request
     * @param {module:SphereonTemplateProcessor/api/TemplateApi~createTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.createTemplateContext = function(templateRequest, callback) {
      var postBody = templateRequest;

      // verify the required parameter 'templateRequest' is set
      if (templateRequest === undefined || templateRequest === null) {
        throw new Error("Missing the required parameter 'templateRequest' when calling createTemplateContext");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/TemplateApi~deleteTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete template context
     * Delete a template context with all history
     * @param {String} templateId templateId
     * @param {module:SphereonTemplateProcessor/api/TemplateApi~deleteTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.deleteTemplateContext = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteTemplateContext");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates/{templateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/TemplateApi~getTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get template context
     * Get an existing template context
     * @param {String} templateId The template context name unique for your environment
     * @param {module:SphereonTemplateProcessor/api/TemplateApi~getTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.getTemplateContext = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateContext");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates/{templateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplateContext operation.
     * @callback module:SphereonTemplateProcessor/api/TemplateApi~updateTemplateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update template context
     * Update an existing template context for your environment
     * @param {module:SphereonTemplateProcessor/model/TemplateContext} templateContext templateContext
     * @param {module:SphereonTemplateProcessor/api/TemplateApi~updateTemplateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.updateTemplateContext = function(templateContext, callback) {
      var postBody = templateContext;

      // verify the required parameter 'templateContext' is set
      if (templateContext === undefined || templateContext === null) {
        throw new Error("Missing the required parameter 'templateContext' when calling updateTemplateContext");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadTemplateFile operation.
     * @callback module:SphereonTemplateProcessor/api/TemplateApi~uploadTemplateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonTemplateProcessor/model/TemplateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload template file
     * Upload the Office template file
     * @param {String} templateId The template context name unique for your environment
     * @param {File} stream The template (file/inputstream) to store
     * @param {module:SphereonTemplateProcessor/api/TemplateApi~uploadTemplateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonTemplateProcessor/model/TemplateContextResponse}
     */
    this.uploadTemplateFile = function(templateId, stream, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling uploadTemplateFile");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling uploadTemplateFile");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = TemplateContextResponse;

      return this.apiClient.callApi(
        '/template/processor/0.1/templates/{templateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
