/**
 * OfficeTextMerge
 * <b>The Office Text API can generate office documents from a template and a JSON data file<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonTemplateProcessor/ApiClient', 'SphereonTemplateProcessor/model/Lifecycle', 'SphereonTemplateProcessor/model/OutputSettings', 'SphereonTemplateProcessor/model/StreamLocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Lifecycle'), require('./OutputSettings'), require('./StreamLocation'));
  } else {
    // Browser globals (root is window)
    if (!root.OfficeTextMerge) {
      root.OfficeTextMerge = {};
    }
    root.OfficeTextMerge.MergeSettings = factory(root.OfficeTextMerge.ApiClient, root.OfficeTextMerge.Lifecycle, root.OfficeTextMerge.OutputSettings, root.OfficeTextMerge.StreamLocation);
  }
}(this, function(ApiClient, Lifecycle, OutputSettings, StreamLocation) {
  'use strict';




  /**
   * The MergeSettings model module.
   * @module SphereonTemplateProcessor/model/MergeSettings
   * @version 0.1
   */

  /**
   * Constructs a new <code>MergeSettings</code>.
   * Merge settings
   * @alias module:SphereonTemplateProcessor/model/MergeSettings
   * @class
   * @param dataSetId {String} Data set id
   * @param resultStreamLocation {module:SphereonTemplateProcessor/model/StreamLocation} The output location of the result files.
   * @param templateId {String} Template id
   * @param outputSettings {module:SphereonTemplateProcessor/model/OutputSettings} 
   */
  var exports = function(dataSetId, resultStreamLocation, templateId, outputSettings) {
    var _this = this;



    _this['dataSetId'] = dataSetId;



    _this['resultStreamLocation'] = resultStreamLocation;
    _this['templateId'] = templateId;
    _this['outputSettings'] = outputSettings;
  };

  /**
   * Constructs a <code>MergeSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonTemplateProcessor/model/MergeSettings} obj Optional instance to populate.
   * @return {module:SphereonTemplateProcessor/model/MergeSettings} The populated <code>MergeSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('lifecycle')) {
        obj['lifecycle'] = Lifecycle.constructFromObject(data['lifecycle']);
      }
      if (data.hasOwnProperty('mergeResult')) {
        obj['mergeResult'] = ApiClient.convertToType(data['mergeResult'], 'String');
      }
      if (data.hasOwnProperty('dataSetId')) {
        obj['dataSetId'] = ApiClient.convertToType(data['dataSetId'], 'String');
      }
      if (data.hasOwnProperty('engine')) {
        obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
      }
      if (data.hasOwnProperty('headerDataSetIds')) {
        obj['headerDataSetIds'] = ApiClient.convertToType(data['headerDataSetIds'], ['String']);
      }
      if (data.hasOwnProperty('templateVersion')) {
        obj['templateVersion'] = ApiClient.convertToType(data['templateVersion'], 'Integer');
      }
      if (data.hasOwnProperty('resultStreamLocation')) {
        obj['resultStreamLocation'] = StreamLocation.constructFromObject(data['resultStreamLocation']);
      }
      if (data.hasOwnProperty('templateId')) {
        obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
      }
      if (data.hasOwnProperty('outputSettings')) {
        obj['outputSettings'] = OutputSettings.constructFromObject(data['outputSettings']);
      }
    }
    return obj;
  }

  /**
   * @member {module:SphereonTemplateProcessor/model/Lifecycle} lifecycle
   */
  exports.prototype['lifecycle'] = undefined;
  /**
   * @member {module:SphereonTemplateProcessor/model/MergeSettings.MergeResultEnum} mergeResult
   */
  exports.prototype['mergeResult'] = undefined;
  /**
   * Data set id
   * @member {String} dataSetId
   */
  exports.prototype['dataSetId'] = undefined;
  /**
   * @member {module:SphereonTemplateProcessor/model/MergeSettings.EngineEnum} engine
   */
  exports.prototype['engine'] = undefined;
  /**
   * optional header data set ids
   * @member {Array.<String>} headerDataSetIds
   */
  exports.prototype['headerDataSetIds'] = undefined;
  /**
   * Template version
   * @member {Integer} templateVersion
   */
  exports.prototype['templateVersion'] = undefined;
  /**
   * The output location of the result files.
   * @member {module:SphereonTemplateProcessor/model/StreamLocation} resultStreamLocation
   */
  exports.prototype['resultStreamLocation'] = undefined;
  /**
   * Template id
   * @member {String} templateId
   */
  exports.prototype['templateId'] = undefined;
  /**
   * @member {module:SphereonTemplateProcessor/model/OutputSettings} outputSettings
   */
  exports.prototype['outputSettings'] = undefined;


  /**
   * Allowed values for the <code>mergeResult</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MergeResultEnum = {
    /**
     * value: "SINGLE_FILE"
     * @const
     */
    "SINGLE_FILE": "SINGLE_FILE",
    /**
     * value: "SEPARATE_FILES"
     * @const
     */
    "SEPARATE_FILES": "SEPARATE_FILES"  };

  /**
   * Allowed values for the <code>engine</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EngineEnum = {
    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",
    /**
     * value: "PREMIUM"
     * @const
     */
    "PREMIUM": "PREMIUM"  };


  return exports;
}));


