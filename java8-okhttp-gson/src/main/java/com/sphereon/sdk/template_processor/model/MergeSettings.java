/*
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.template_processor.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.template_processor.model.Lifecycle;
import com.sphereon.sdk.template_processor.model.OutputSettings;
import com.sphereon.sdk.template_processor.model.StorageLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Merge settings
 */
@ApiModel(description = "Merge settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-20T13:28:56.163+02:00")
public class MergeSettings {
  @SerializedName("lifecycle")
  private Lifecycle lifecycle = null;

  /**
   * Gets or Sets mergeResult
   */
  @JsonAdapter(MergeResultEnum.Adapter.class)
  public enum MergeResultEnum {
    SINGLE_FILE("SINGLE_FILE"),
    
    SEPARATE_FILES("SEPARATE_FILES");

    private String value;

    MergeResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeResultEnum fromValue(String text) {
      for (MergeResultEnum b : MergeResultEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MergeResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeResultEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MergeResultEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mergeResult")
  private MergeResultEnum mergeResult = null;

  @SerializedName("dataSetId")
  private String dataSetId = null;

  /**
   * Gets or Sets engine
   */
  @JsonAdapter(EngineEnum.Adapter.class)
  public enum EngineEnum {
    BASIC("BASIC"),
    
    PREMIUM("PREMIUM");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineEnum fromValue(String text) {
      for (EngineEnum b : EngineEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EngineEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("engine")
  private EngineEnum engine = null;

  @SerializedName("headerDataSetIds")
  private List<String> headerDataSetIds = null;

  @SerializedName("resultStorageLocation")
  private StorageLocation resultStorageLocation = null;

  @SerializedName("templateVersion")
  private Integer templateVersion = null;

  @SerializedName("templateId")
  private String templateId = null;

  @SerializedName("outputSettings")
  private OutputSettings outputSettings = null;

  public MergeSettings lifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

   /**
   * Get lifecycle
   * @return lifecycle
  **/
  @ApiModelProperty(value = "")
  public Lifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }

  public MergeSettings mergeResult(MergeResultEnum mergeResult) {
    this.mergeResult = mergeResult;
    return this;
  }

   /**
   * Get mergeResult
   * @return mergeResult
  **/
  @ApiModelProperty(value = "")
  public MergeResultEnum getMergeResult() {
    return mergeResult;
  }

  public void setMergeResult(MergeResultEnum mergeResult) {
    this.mergeResult = mergeResult;
  }

  public MergeSettings dataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
    return this;
  }

   /**
   * Data set id
   * @return dataSetId
  **/
  @ApiModelProperty(required = true, value = "Data set id")
  public String getDataSetId() {
    return dataSetId;
  }

  public void setDataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
  }

  public MergeSettings engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

   /**
   * Get engine
   * @return engine
  **/
  @ApiModelProperty(value = "")
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }

  public MergeSettings headerDataSetIds(List<String> headerDataSetIds) {
    this.headerDataSetIds = headerDataSetIds;
    return this;
  }

  public MergeSettings addHeaderDataSetIdsItem(String headerDataSetIdsItem) {
    if (this.headerDataSetIds == null) {
      this.headerDataSetIds = new ArrayList<String>();
    }
    this.headerDataSetIds.add(headerDataSetIdsItem);
    return this;
  }

   /**
   * optional header data set ids
   * @return headerDataSetIds
  **/
  @ApiModelProperty(value = "optional header data set ids")
  public List<String> getHeaderDataSetIds() {
    return headerDataSetIds;
  }

  public void setHeaderDataSetIds(List<String> headerDataSetIds) {
    this.headerDataSetIds = headerDataSetIds;
  }

  public MergeSettings resultStorageLocation(StorageLocation resultStorageLocation) {
    this.resultStorageLocation = resultStorageLocation;
    return this;
  }

   /**
   * The output location of the result files.
   * @return resultStorageLocation
  **/
  @ApiModelProperty(required = true, value = "The output location of the result files.")
  public StorageLocation getResultStorageLocation() {
    return resultStorageLocation;
  }

  public void setResultStorageLocation(StorageLocation resultStorageLocation) {
    this.resultStorageLocation = resultStorageLocation;
  }

  public MergeSettings templateVersion(Integer templateVersion) {
    this.templateVersion = templateVersion;
    return this;
  }

   /**
   * Template version
   * @return templateVersion
  **/
  @ApiModelProperty(value = "Template version")
  public Integer getTemplateVersion() {
    return templateVersion;
  }

  public void setTemplateVersion(Integer templateVersion) {
    this.templateVersion = templateVersion;
  }

  public MergeSettings templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Template id
   * @return templateId
  **/
  @ApiModelProperty(required = true, value = "Template id")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  public MergeSettings outputSettings(OutputSettings outputSettings) {
    this.outputSettings = outputSettings;
    return this;
  }

   /**
   * Get outputSettings
   * @return outputSettings
  **/
  @ApiModelProperty(required = true, value = "")
  public OutputSettings getOutputSettings() {
    return outputSettings;
  }

  public void setOutputSettings(OutputSettings outputSettings) {
    this.outputSettings = outputSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeSettings mergeSettings = (MergeSettings) o;
    return Objects.equals(this.lifecycle, mergeSettings.lifecycle) &&
        Objects.equals(this.mergeResult, mergeSettings.mergeResult) &&
        Objects.equals(this.dataSetId, mergeSettings.dataSetId) &&
        Objects.equals(this.engine, mergeSettings.engine) &&
        Objects.equals(this.headerDataSetIds, mergeSettings.headerDataSetIds) &&
        Objects.equals(this.resultStorageLocation, mergeSettings.resultStorageLocation) &&
        Objects.equals(this.templateVersion, mergeSettings.templateVersion) &&
        Objects.equals(this.templateId, mergeSettings.templateId) &&
        Objects.equals(this.outputSettings, mergeSettings.outputSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifecycle, mergeResult, dataSetId, engine, headerDataSetIds, resultStorageLocation, templateVersion, templateId, outputSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeSettings {\n");
    
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    mergeResult: ").append(toIndentedString(mergeResult)).append("\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    headerDataSetIds: ").append(toIndentedString(headerDataSetIds)).append("\n");
    sb.append("    resultStorageLocation: ").append(toIndentedString(resultStorageLocation)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    outputSettings: ").append(toIndentedString(outputSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

