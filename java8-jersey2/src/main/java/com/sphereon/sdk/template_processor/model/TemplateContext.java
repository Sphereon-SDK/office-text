/*
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.template_processor.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sphereon.sdk.template_processor.model.OwnerInfo;
import com.sphereon.sdk.template_processor.model.StorageLocation;
import com.sphereon.sdk.template_processor.model.StreamLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TemplateContext
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-20T13:28:35.968+02:00")
public class TemplateContext {
  /**
   * Gets or Sets templateType
   */
  public enum TemplateTypeEnum {
    OFFICE("OFFICE"),
    
    FREEMARKER("FREEMARKER");

    private String value;

    TemplateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TemplateTypeEnum fromValue(String text) {
      for (TemplateTypeEnum b : TemplateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("templateType")
  private TemplateTypeEnum templateType = null;

  @JsonProperty("templateFileLocations")
  private Map<String, StreamLocation> templateFileLocations = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("ownerInfo")
  private OwnerInfo ownerInfo = null;

  @JsonProperty("storageLocation")
  private StorageLocation storageLocation = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("templateId")
  private String templateId = null;

  public TemplateContext templateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
    return this;
  }

   /**
   * Get templateType
   * @return templateType
  **/
  @ApiModelProperty(required = true, value = "")
  public TemplateTypeEnum getTemplateType() {
    return templateType;
  }

  public void setTemplateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
  }

  public TemplateContext templateFileLocations(Map<String, StreamLocation> templateFileLocations) {
    this.templateFileLocations = templateFileLocations;
    return this;
  }

  public TemplateContext putTemplateFileLocationsItem(String key, StreamLocation templateFileLocationsItem) {
    if (this.templateFileLocations == null) {
      this.templateFileLocations = new HashMap<String, StreamLocation>();
    }
    this.templateFileLocations.put(key, templateFileLocationsItem);
    return this;
  }

   /**
   * The template files (versioned)
   * @return templateFileLocations
  **/
  @ApiModelProperty(value = "The template files (versioned)")
  public Map<String, StreamLocation> getTemplateFileLocations() {
    return templateFileLocations;
  }

  public void setTemplateFileLocations(Map<String, StreamLocation> templateFileLocations) {
    this.templateFileLocations = templateFileLocations;
  }

  public TemplateContext description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The template description
   * @return description
  **/
  @ApiModelProperty(value = "The template description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TemplateContext ownerInfo(OwnerInfo ownerInfo) {
    this.ownerInfo = ownerInfo;
    return this;
  }

   /**
   * Get ownerInfo
   * @return ownerInfo
  **/
  @ApiModelProperty(value = "")
  public OwnerInfo getOwnerInfo() {
    return ownerInfo;
  }

  public void setOwnerInfo(OwnerInfo ownerInfo) {
    this.ownerInfo = ownerInfo;
  }

  public TemplateContext storageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

   /**
   * The storage location. (optional)
   * @return storageLocation
  **/
  @ApiModelProperty(value = "The storage location. (optional)")
  public StorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(StorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }

  public TemplateContext id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TemplateContext templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * The template context id
   * @return templateId
  **/
  @ApiModelProperty(value = "The template context id")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateContext templateContext = (TemplateContext) o;
    return Objects.equals(this.templateType, templateContext.templateType) &&
        Objects.equals(this.templateFileLocations, templateContext.templateFileLocations) &&
        Objects.equals(this.description, templateContext.description) &&
        Objects.equals(this.ownerInfo, templateContext.ownerInfo) &&
        Objects.equals(this.storageLocation, templateContext.storageLocation) &&
        Objects.equals(this.id, templateContext.id) &&
        Objects.equals(this.templateId, templateContext.templateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateType, templateFileLocations, description, ownerInfo, storageLocation, id, templateId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateContext {\n");
    
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    templateFileLocations: ").append(toIndentedString(templateFileLocations)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ownerInfo: ").append(toIndentedString(ownerInfo)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

