/*
 * Template-Processor
 * <b>The Template-Processor API can generate office, xml and json documents from a template and a JSON data file. Supported templates are MS Office files and freemarker files.<</b>    The flow is generally as follows:      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.template_processor.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;

/**
 * The merge template response.
 */
@ApiModel(description = "The merge template response.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-20T13:28:35.968+02:00")
public class DataSetResponse {
  @JsonProperty("completionTime")
  private OffsetDateTime completionTime = null;

  @JsonProperty("creationTime")
  private OffsetDateTime creationTime = null;

  @JsonProperty("id")
  private String id = null;

  /**
   * The status of the template
   */
  public enum StatusEnum {
    CREATED("CREATED"),
    
    UPDATED("UPDATED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

   /**
   * The completion date/time of this template in ISO 8601 format
   * @return completionTime
  **/
  @ApiModelProperty(value = "The completion date/time of this template in ISO 8601 format")
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

   /**
   * The creation date/time of this template in ISO 8601 format
   * @return creationTime
  **/
  @ApiModelProperty(value = "The creation date/time of this template in ISO 8601 format")
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public DataSetResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique dataset id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique dataset id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * The status of the template
   * @return status
  **/
  @ApiModelProperty(required = true, value = "The status of the template")
  public StatusEnum getStatus() {
    return status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSetResponse dataSetResponse = (DataSetResponse) o;
    return Objects.equals(this.completionTime, dataSetResponse.completionTime) &&
        Objects.equals(this.creationTime, dataSetResponse.creationTime) &&
        Objects.equals(this.id, dataSetResponse.id) &&
        Objects.equals(this.status, dataSetResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, creationTime, id, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSetResponse {\n");
    
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

